@page "/transactions"
@attribute [Authorize]
@inject ITransactionService TransactionService
@inject IProductDetailsService ProductDetailsService
@inject IProductService ProductService
@inject ITransactionTypeService TransactionTypeService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Notifications
@using System.Security.Claims
@using System.Collections.Generic
@using System.Threading.Tasks
@using Syncfusion.Blazor.SplitButtons


<h3>Transactions</h3>

<AuthorizeView>
    <Authorized>


        <p>DateRangePicker StartDate and EndDate is: <strong>@startDate</strong> and <strong>@endDate</strong></p>
        <SfDateRangePicker TValue="DateTime?" StartDate="@startDate" EndDate="@endDate">
            <DateRangePickerEvents TValue="DateTime?" ValueChange="@onChange"></DateRangePickerEvents>
        </SfDateRangePicker>
        <div class="col-lg-12 control-section">
            <div class="control-wrapper">
                <div class="cascading">
                    <label class="example-label">Product</label>
                    <SfDropDownList TValue="int" DataSource="@activeProducts" Placeholder="Select a product" @bind-Value="selectedProductId" TItem="Products">
                        <DropDownListEvents TItem="Products" TValue="int" ValueChange="ChangeProduct"></DropDownListEvents>
                        <DropDownListFieldSettings Text="ProductName" Value="ProductId"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div>
                    <label class="example-label">Transaction Type</label>
                    <SfDropDownList TValue="int" DataSource="@types" Placeholder="Select a transaction type" @bind-Value="selectedTransactionTypeId" TItem="TransactionTypes">
                        <DropDownListFieldSettings Text="TypeName" Value="TransactionTypeID"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="cascading">
                    <label class="example-label">Expiry Date</label>
                    <SfDropDownList TValue="int"  DataSource="@filteredExpiryDates" Placeholder="Select an expiry date" @bind-Value="selectedExpiryDate" TItem="ProductDetails">
                        <DropDownListFieldSettings Text="ExpiryDate" Value="DetailID"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
        </div>

        <div>
            <label class="example-label">Quantity</label>
            <SfNumericTextBox TValue="int" Placeholder="Enter Quantity" @bind-Value="quantity"></SfNumericTextBox>
        </div>
        
      <SfProgressButton EnableProgress="true" Content="Progress Step" CssClass="e-hide-spinner">
            <ProgressButtonEvents OnBegin="SubmitTransaction"></ProgressButtonEvents>
        </SfProgressButton>


        <SfGrid DataSource="@transactions" AllowFiltering="true"  TValue="Transactions">
            <GridEditSettings AllowDeleting="true" AllowEditing="true" Mode="EditMode.Normal"></GridEditSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
            <GridEvents TValue="Transactions" OnActionComplete="@(ActionCompleteHandler)"></GridEvents>
            <GridColumns>
                <GridColumn Field="@nameof(Transactions.TransactionID)" HeaderText="TransactionID" IsPrimaryKey="true" ValidationRules="@(new ValidationRules { Required = true })" TextAlign="TextAlign.Center" Width="120" AllowFiltering="false" AllowAdding="false" AllowEditing="false"></GridColumn>
                <GridForeignColumn Field="@nameof(Transactions.ProductId)" HeaderText="Product Name" ForeignKeyValue="ProductName" ForeignDataSource="@activeProducts" Width="150" AllowFiltering="false" AllowEditing="true"></GridForeignColumn>
                <GridForeignColumn Field="@nameof(Transactions.TransactionTypeID)" HeaderText="Type Name" ForeignKeyValue="TypeName" ForeignDataSource="@types" Width="150" AllowFiltering="false" AllowEditing="true"></GridForeignColumn>
                <GridColumn Field="@nameof(Transactions.ExpiryDate)" HeaderText="Expiry Date" Width="150" AllowFiltering="false" AllowEditing="true"></GridColumn>
                <GridColumn Field="@nameof(Transactions.Quantity)" HeaderText="Quantity" ValidationRules="@(new ValidationRules { Required = true })" TextAlign="TextAlign.Center" Width="150" AllowFiltering="false" AllowEditing="true"></GridColumn>
                <GridColumn Field="@nameof(Transactions.TransactionDate)" HeaderText="Transaction Date" Width="150" Format="yyyy-MM-dd" AllowFiltering="false" AllowEditing="true" AllowAdding="false"></GridColumn>
                <GridColumn Field="@nameof(Transactions.CreateBy)" HeaderText="Create By" Width="150" AllowAdding="false" AllowEditing="false" AllowFiltering="false"></GridColumn>
                <GridColumn Field="@nameof(Transactions.CreateDate)" HeaderText="Create Date" Format="yyyy-MM-dd" Width="150" AllowAdding="false" AllowEditing="false" AllowFiltering="false"></GridColumn>
            </GridColumns>
        </SfGrid>
    </Authorized>
    <NotAuthorized>
        <p>You must be logged in to access this page.</p>
    </NotAuthorized>
</AuthorizeView>

<SfToast ID="toast_default" @ref="ToastObj">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>



@code {
    private IEnumerable<Transactions> transactions;
    private IEnumerable<Products> activeProducts;
    private IEnumerable<TransactionTypes> types;
    private IEnumerable<ProductDetails> filteredExpiryDates;
    private ClaimsPrincipal user;

    private DateTime? startDate { get; set; }
    private DateTime? endDate { get; set; }

    public bool EnableExpiryDateDropDown = false;
    public Query ExpiryDateQuery { get; set; } = null;
    public string ExpiryDateValue { get; set; } = null;

    private int selectedProductId;
    private int selectedTransactionTypeId;
    private int selectedExpiryDate;
    private int quantity;


    SfToast ToastObj;
    private string ToastContent;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        await LoadProducts();
        await LoadTransactionTypes();
        await LoadTransactions(); 
    }
    private async Task LoadTransactions()
    {
        transactions = await TransactionService.GetAllTransactionsAsync(startDate, endDate);
    }

    private async Task LoadProducts()
    {
        var products = await ProductService.GetAllProductsAsync();
        activeProducts = products.Where(c => c.Active).ToList();
    }

    private async Task LoadTransactionTypes()
    {
        types = await TransactionTypeService.GetAllTransactionTypeAsync();
    }
    private async void onChange(RangePickerEventArgs<DateTime?> args)
    {
        startDate = args.StartDate;
        endDate = args.EndDate;
        await LoadTransactions();
        StateHasChanged();
    }
    public async void ChangeProduct(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, Products> args)
    {
        filteredExpiryDates = await ProductDetailsService.GetExpiryDatesByProductIdAsync(args.Value);
        StateHasChanged();
    }
    private async Task SubmitTransaction()
    {
        if (selectedTransactionTypeId == 3)
        {
            var productDetails = await ProductDetailsService.GetProductDetailByIdAndExpiryDateAsync(selectedProductId);
            var productDetail = productDetails.FirstOrDefault(d => d.DetailID == selectedExpiryDate);

            if (productDetail != null && productDetail.Balance >= quantity)
            {
                var newTransaction = new Transactions
                    {
                        ProductId = selectedProductId,
                        ExpiryDate = productDetail.ExpiryDate,
                        TransactionTypeID = selectedTransactionTypeId,
                        Quantity = quantity,
                        TransactionDate = DateTime.Now,
                        CreateBy = user.Identity.Name,
                        CreateDate = DateTime.Now
                    };
                await TransactionService.InsertTransactionAsync(newTransaction);
                await LoadTransactions();
                ToastContent = "Transaction added successfully.";
                await Task.Delay(100);
                await ToastObj.ShowAsync(new ToastModel { Title = "Transaction Success", Content = "Transaction added successfully!", CssClass = "e-toast-success" });
            }
            else
            {
                ToastContent = "Insufficient balance for this transaction.";
                await Task.Delay(100);
                await ToastObj.ShowAsync(new ToastModel { Title = "Transaction Error", Content = "Insufficient Balance!", CssClass = "e-toast-warning" });
            }
        }
        else
        {
            var newTransaction = new Transactions
                {
                    ProductId = selectedProductId,
                    ExpiryDate = filteredExpiryDates.FirstOrDefault(d => d.DetailID == selectedExpiryDate)?.ExpiryDate,
                    TransactionTypeID = selectedTransactionTypeId,
                    Quantity = quantity,
                    TransactionDate = DateTime.Now,
                    CreateBy = user.Identity.Name,
                    CreateDate = DateTime.Now
                };
            await TransactionService.InsertTransactionAsync(newTransaction);
            await LoadTransactions();
            ToastContent = "Transaction added successfully.";
            await Task.Delay(100);
            await ToastObj.ShowAsync(new ToastModel { Title = "Transaction Success", Content = "Transaction added successfully!", CssClass = "e-toast-success" });
        }
    }


    private async Task ActionCompleteHandler(ActionEventArgs<Transactions> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            await LoadTransactions();
        }
    }
}
